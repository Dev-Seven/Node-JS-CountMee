const router = require('express').Router()
const eventController = require('../controllers/event.controller')
const validator = require('../validators/event.validators')
const { setLanguage , isUserAuthenticated } = require('../middleware/auth.middleware')
const  { upload, uploadCsv, uploadPdf }  = require('../middleware/upload.middleware')

router.post('/event/createEvent', isUserAuthenticated, upload.fields([{ name: 'banner', maxCount: 1 }, { name: 'logo', maxCount: 1 }, { name: 'eve_video', maxCount: 1 }, { name: 'eve_login_banner', maxCount: 1 }, { name: 'eve_logo_sly[]', maxCount: 10 }]), validator.createEvent, setLanguage, eventController.createEvent)
router.post("/event/editEvent", isUserAuthenticated, upload.fields([{ name: 'banner', maxCount: 1 }, { name: 'logo', maxCount: 1 }, { name: 'eve_video', maxCount: 1 }, { name: 'eve_login_banner', maxCount: 1 }, { name: 'eve_logo_sly[]', maxCount: 10 }]), validator.editEvent, setLanguage, eventController.editEvent)
router.post('/event/approveEvent', isUserAuthenticated, validator.approveEvent, setLanguage, eventController.approveEvent)
router.post('/event/declineEvent', isUserAuthenticated, validator.declineEvent, setLanguage, eventController.declineEvent)
router.post('/event/allEvent', isUserAuthenticated, setLanguage, eventController.allEvent)
router.post('/event/allDeletedEvent', isUserAuthenticated, setLanguage, eventController.allDeletedEvent)
router.post('/event/eventsByOrg', isUserAuthenticated, validator.eventsByOrg, setLanguage, eventController.eventsByOrg)
router.post("/event/eventById", validator.eventById, setLanguage, eventController.eventById)
router.post('/event/eventByCode', validator.eventByCode, setLanguage, eventController.eventByCode)
router.post('/event/eventDetailsByCode', setLanguage, validator.eventDetailsByCode, eventController.eventDetailsByCode)
router.post('/event/eventDetail', setLanguage, validator.eventDetail, eventController.eventDetail)
router.post("/event/totalEvents", isUserAuthenticated, setLanguage, eventController.totalEvents)
router.post("/event/speSpoExpoByEvent", isUserAuthenticated, setLanguage, eventController.speSpoExpoByEvent)
router.post("/event/speSpoExpoByEventN", isUserAuthenticated, setLanguage, eventController.speSpoExpoByEventN)
router.post("/event/speSpoExpoByAllEvent", isUserAuthenticated, setLanguage, eventController.speSpoExpoByAllEvent)
router.post("/event/allOrgEveSpeSpoExpo", isUserAuthenticated, setLanguage, eventController.allOrgEveSpeSpoExpo)
router.post("/event/allOrgEveSpeSpoExpoList", isUserAuthenticated, setLanguage, eventController.allOrgEveSpeSpoExpoList)
router.post("/event/eveSpeSpoExpoByOrg", isUserAuthenticated, setLanguage, eventController.eveSpeSpoExpoByOrg)
router.post("/event/speakerByEventSa", isUserAuthenticated, setLanguage, eventController.speakerByEventSa)
router.post("/event/sponsorByEventSa", isUserAuthenticated, setLanguage, eventController.sponsorByEventSa)
router.post("/event/expoByEventSa", isUserAuthenticated, setLanguage, eventController.expoByEventSa)
router.post("/event/sessionByEventSa", isUserAuthenticated, setLanguage, eventController.sessionByEventSa)
router.post("/event/stageByEventSa", isUserAuthenticated, setLanguage, eventController.stageByEventSa)
router.post("/event/eventsByOrgSa", isUserAuthenticated, setLanguage, eventController.eventsByOrgSa)
router.post('/event/deleteEventByOrg', isUserAuthenticated, validator.deleteEventByOrg, setLanguage, eventController.deleteEventByOrg)
router.post('/event/deleteEvent', isUserAuthenticated, validator.deleteEvent, setLanguage, eventController.deleteEvent)
router.post('/event/deleteEventBySuperAdmin', isUserAuthenticated, validator.deleteEventBySuperAdmin, setLanguage, eventController.deleteEventBySuperAdmin)
router.post('/event/eventSdnDataHdBySa', isUserAuthenticated, validator.eventSdnDataHdBySa, setLanguage, eventController.eventSdnDataHdBySa)
router.post("/event/addSpeaker", isUserAuthenticated, upload.array('avatar'), validator.addSpeaker, setLanguage, eventController.addSpeaker)
router.post("/event/editSpeaker", isUserAuthenticated, upload.array('avatar'), validator.editSpeaker, setLanguage, eventController.editSpeaker)
router.post('/event/allSpeaker', isUserAuthenticated, setLanguage, eventController.allSpeaker)
router.post("/event/speakerDetail", isUserAuthenticated, validator.speakerDetail, setLanguage, eventController.speakerDetail)
router.post('/event/speakerByEvent', isUserAuthenticated, validator.speakerByEvent, setLanguage, eventController.speakerByEvent)
router.post("/event/totalSpeakers", isUserAuthenticated, setLanguage, eventController.totalSpeakers)
router.post("/event/addSpeakerToFeature", isUserAuthenticated, validator.addSpeakerToFeature, setLanguage, eventController.addSpeakerToFeature)
router.post("/event/rmvSpeakerToFeature", isUserAuthenticated, validator.rmvSpeakerToFeature, setLanguage, eventController.rmvSpeakerToFeature)
router.post("/event/rmvAllTSpeakerToFeature", isUserAuthenticated, validator.rmvAllTSpeakerToFeature, setLanguage, eventController.rmvAllTSpeakerToFeature)
router.post('/event/allDeletedSpeaker', isUserAuthenticated, setLanguage, eventController.allDeletedSpeaker)
router.post('/event/deleteSpeaker', isUserAuthenticated, validator.deleteSpeaker, setLanguage, eventController.deleteSpeaker)
router.post("/event/addSponsor", isUserAuthenticated, upload.fields([{ name: 'banner', maxCount: 1 }, { name: 'logo', maxCount: 1 }]), validator.addSponsor, setLanguage, eventController.addSponsor)
router.post("/event/editSponsor", isUserAuthenticated, upload.fields([{ name: 'banner', maxCount: 1 }, { name: 'logo', maxCount: 1 }]), validator.editSponsor, setLanguage, eventController.editSponsor)
router.post("/event/addSponsorToFeature", isUserAuthenticated, validator.addSponsorToFeature, setLanguage, eventController.addSponsorToFeature)
router.post("/event/rmvSponsorToFeature", isUserAuthenticated, validator.rmvSponsorToFeature, setLanguage, eventController.rmvSponsorToFeature)
router.post("/event/rmvAllTSponsorToFeature", isUserAuthenticated, validator.rmvAllTSponsorToFeature, setLanguage, eventController.rmvAllTSponsorToFeature)
router.post('/event/sponsorBulkUpload', isUserAuthenticated, upload.array('csv'), setLanguage, eventController.sponsorBulkUpload)
router.post('/event/allSponsor', isUserAuthenticated, setLanguage, eventController.allSponsor)
router.post("/event/sponsorDetail", isUserAuthenticated, validator.sponsorDetail, setLanguage, eventController.sponsorDetail)
router.post('/event/sponsorByEvent', isUserAuthenticated, validator.sponsorByEvent, setLanguage, eventController.sponsorByEvent)
router.post('/event/sponsorByOrg', isUserAuthenticated, validator.sponsorByOrg, setLanguage, eventController.sponsorByOrg)
router.post('/event/allDeletedSponsor', isUserAuthenticated, setLanguage, eventController.allDeletedSponsor)
router.post('/event/deleteSponsor', isUserAuthenticated, validator.deleteSponsor, setLanguage, eventController.deleteSponsor)
router.post("/event/addStage", isUserAuthenticated, upload.array('speaker[]'), validator.addStage, setLanguage, eventController.addStage)
router.post("/event/editStage", isUserAuthenticated, upload.array('speaker[]'), validator.editStage, setLanguage, eventController.editStage)
router.post('/event/allStage', isUserAuthenticated, setLanguage, eventController.allStage)
router.post("/event/stageDetail", isUserAuthenticated, validator.stageDetail, setLanguage, eventController.stageDetail)
router.post('/event/stageByEvent', isUserAuthenticated, validator.stageByEvent, setLanguage, eventController.stageByEvent)
router.post("/event/isStageWatch", isUserAuthenticated, validator.isStageWatch, setLanguage, eventController.isStageWatch)
router.post("/event/stageWatchUser", isUserAuthenticated, validator.stageWatchUser , setLanguage, eventController.stageWatchUser)
router.post('/event/allDeletedStage', isUserAuthenticated, setLanguage, eventController.allDeletedStage)
router.post('/event/deleteStage', isUserAuthenticated, validator.deleteStage, setLanguage, eventController.deleteStage)
router.post("/event/addPartner", isUserAuthenticated, upload.array('logo[]'), validator.addPartner, setLanguage, eventController.addPartner)
router.post("/event/editPartner", isUserAuthenticated, upload.array('catalouge[]'), validator.editPartner, setLanguage, eventController.editPartner)
router.post('/event/allPartner', isUserAuthenticated, setLanguage, eventController.allPartner)
router.post("/event/partnerDetail", isUserAuthenticated, validator.partnerDetail, setLanguage, eventController.partnerDetail)
router.post('/event/partnerByEvent', isUserAuthenticated, validator.partnerByEvent, setLanguage, eventController.partnerByEvent)
router.post("/event/totalPartners", isUserAuthenticated, setLanguage, eventController.totalPartners)
router.post('/event/allDeletedPartner', isUserAuthenticated, setLanguage, eventController.allDeletedPartner)
router.post('/event/deletePartner', isUserAuthenticated, validator.deletePartner, setLanguage, eventController.deletePartner)
router.post('/event/userRegForEve', validator.userRegForEve, setLanguage, eventController.userRegForEve)
router.post('/event/editUserProfileForEve', isUserAuthenticated, validator.editUserProfileForEve, setLanguage, eventController.editUserProfileForEve)
router.post('/event/userLoginForEve', validator.userLoginForEve, setLanguage, eventController.userLoginForEve)
router.post('/event/userChangePasswordForEve',isUserAuthenticated, validator.userChangePasswordForEve, setLanguage, eventController.userChangePasswordForEve)
router.post("/event/totalRegUserForEvent", isUserAuthenticated, setLanguage, eventController.totalRegUserForEvent)
router.post('/event/attendeesForEvent', isUserAuthenticated, validator.attendeesForEvent, setLanguage, eventController.attendeesForEvent)
router.post('/event/attendeesByCountry', isUserAuthenticated, validator.attendeesByCountry, setLanguage, eventController.attendeesByCountry)
router.post('/event/addWelMsg', isUserAuthenticated, validator.addWelMsg, setLanguage, eventController.addWelMsg)
router.post('/event/allWelMsg', isUserAuthenticated, setLanguage, eventController.allWelMsg)
router.post('/event/msgsByType', isUserAuthenticated, validator.msgsByType, setLanguage, eventController.msgsByType)
router.post("/event/msgDetail", isUserAuthenticated, validator.msgDetail, setLanguage, eventController.msgDetail)
router.post('/event/deleteWelMsg', isUserAuthenticated, validator.deleteWelMsg, setLanguage, eventController.deleteWelMsg)
router.post('/event/scheduleAgenda', isUserAuthenticated, upload.array('speakers[]'), validator.scheduleAgenda, setLanguage, eventController.scheduleAgenda)
router.post("/event/editScheduleAgenda", isUserAuthenticated, upload.array('doc[]'), validator.editScheduleAgenda, setLanguage, eventController.editScheduleAgenda)
router.post('/event/allScheduledAgenda', isUserAuthenticated, setLanguage, eventController.allScheduledAgenda)
router.post('/event/allScheduledNetwork', isUserAuthenticated, setLanguage, eventController.allScheduledNetwork)
router.post("/event/scheduledAgendaDetail", isUserAuthenticated, validator.scheduledAgendaDetail, setLanguage, eventController.scheduledAgendaDetail)
router.post('/event/scheduledAgendaByEvent', isUserAuthenticated, validator.scheduledAgendaByEvent, setLanguage, eventController.scheduledAgendaByEvent)
router.post('/event/scheduledNetworkByEvent', isUserAuthenticated, validator.scheduledNetworkByEvent, setLanguage, eventController.scheduledNetworkByEvent)
router.post('/event/sessionStageScheduledByEvent', isUserAuthenticated, validator.sessionStageScheduledByEvent, setLanguage, eventController.sessionStageScheduledByEvent)
router.post('/event/allDeletedScheduledAgenda', isUserAuthenticated, setLanguage, eventController.allDeletedScheduledAgenda)
router.post('/event/deleteScheduledAgenda', isUserAuthenticated, validator.deleteScheduledAgenda, setLanguage, eventController.deleteScheduledAgenda)
router.post("/event/addExpoBooth", isUserAuthenticated, upload.array('banner[]'), validator.addExpoBooth, setLanguage, eventController.addExpoBooth)
router.post("/event/editExpo", isUserAuthenticated, upload.array('banner[]'), validator.editExpo, setLanguage, eventController.editExpo)
router.post('/event/allExpoBooth', isUserAuthenticated, setLanguage, eventController.allExpoBooth)
router.post("/event/expoBoothDetail", isUserAuthenticated, validator.expoBoothDetail, setLanguage, eventController.expoBoothDetail)
router.post('/event/allDeletedExpo', isUserAuthenticated, setLanguage, eventController.allDeletedExpo)
router.post('/event/deleteExpo', isUserAuthenticated, validator.deleteExpo, setLanguage, eventController.deleteExpo)
router.post('/event/expoByEvent', isUserAuthenticated, validator.expoByEvent, setLanguage, eventController.expoByEvent)
router.post("/event/totalExpo", isUserAuthenticated, setLanguage, eventController.totalExpo)
router.post('/event/uploadCsv', isUserAuthenticated, upload.array('csv'), validator.uploadCsv, setLanguage, eventController.uploadCsv)
router.post("/event/addCustomField", isUserAuthenticated, validator.addCustomField, setLanguage, eventController.addCustomField)
router.post("/event/addCustomFieldNew", isUserAuthenticated, setLanguage, eventController.addCustomFieldNew)
router.post("/event/editCustomField", isUserAuthenticated, validator.editCustomField, setLanguage, eventController.editCustomField)
router.post('/event/customfieldByEvent', validator.customfieldByEvent, setLanguage, eventController.customfieldByEvent)
router.post('/event/allCustomField', isUserAuthenticated, setLanguage, eventController.allCustomField)
router.post("/event/customFieldDetail", isUserAuthenticated, validator.customFieldDetail, setLanguage, eventController.customFieldDetail)
router.post("/event/customfieldUpdate", isUserAuthenticated, setLanguage, eventController.customfieldUpdate)
router.post('/event/allDeletedCustomField', isUserAuthenticated, setLanguage, eventController.allDeletedCustomField)
router.post('/event/deleteCustomField', isUserAuthenticated, validator.deleteCustomField, setLanguage, eventController.deleteCustomField)
router.post('/event/emailCredOrganization', isUserAuthenticated, validator.emailCredOrganization, setLanguage, eventController.emailCredOrganization)
router.post('/event/postEventFeed', isUserAuthenticated, upload.array('doc'), validator.postEventFeed, setLanguage, eventController.postEventFeed)
router.post('/event/editPostEventFeed', isUserAuthenticated, upload.array('doc'), validator.editPostEventFeed, setLanguage, eventController.editPostEventFeed)
router.post('/event/allFeedPost', isUserAuthenticated, validator.allFeedPost, setLanguage, eventController.allFeedPost)
router.post('/event/myFeedPost', isUserAuthenticated, validator.myFeedPost, setLanguage, eventController.myFeedPost)
router.post('/event/allPdfFeedPost', isUserAuthenticated, validator.allPdfFeedPost, setLanguage, eventController.allPdfFeedPost)
router.post('/event/allImageFeedPost', isUserAuthenticated, validator.allImageFeedPost, setLanguage, eventController.allImageFeedPost)
router.post('/event/allVideoFeedPost', isUserAuthenticated, validator.allVideoFeedPost, setLanguage, eventController.allVideoFeedPost)
router.post("/event/postDetail", isUserAuthenticated, validator.postDetail, setLanguage, eventController.postDetail)
router.post('/event/allDeletedPost', isUserAuthenticated, setLanguage, eventController.allDeletedPost)
router.post('/event/deleteFeedPost', isUserAuthenticated, validator.deleteFeedPost, setLanguage, eventController.deleteFeedPost)
router.post('/event/eventFeedComment', isUserAuthenticated, validator.eventFeedComment, setLanguage, eventController.eventFeedComment)
router.post('/event/editEventFeedComment', isUserAuthenticated, validator.editEventFeedComment, setLanguage, eventController.editEventFeedComment)
router.post('/event/allEventFeedComment', isUserAuthenticated, setLanguage, eventController.allEventFeedComment)
router.post('/event/commentOnFeedPost', isUserAuthenticated, validator.commentOnFeedPost, setLanguage, eventController.commentOnFeedPost)
router.post('/event/commentOnPost', isUserAuthenticated, setLanguage, eventController.commentOnPost)
router.post('/event/commentOnAllPost', isUserAuthenticated, setLanguage, eventController.commentOnAllPost)
router.post('/event/deleteFeedPostComment', isUserAuthenticated, validator.deleteFeedPostComment, setLanguage, eventController.deleteFeedPostComment)
router.post('/event/allDeletedfeedPostComment', isUserAuthenticated, setLanguage, eventController.allDeletedfeedPostComment)
router.post("/event/addSession", isUserAuthenticated, uploadPdf.array('doc[]'), validator.addSession, setLanguage, eventController.addSession)
router.post("/event/editSession", isUserAuthenticated, uploadPdf.array('doc[]'), validator.editSession, setLanguage, eventController.editSession)
router.post('/event/allSession', isUserAuthenticated, setLanguage, eventController.allSession)
router.post('/event/sessionByEvent', isUserAuthenticated, validator.sessionByEvent, setLanguage, eventController.sessionByEvent)
router.post("/event/sessionDetail", isUserAuthenticated, validator.sessionDetail, setLanguage, eventController.sessionDetail)
router.post("/event/isSessionWatch", isUserAuthenticated, validator.isSessionWatch, setLanguage, eventController.isSessionWatch)
router.post("/event/sessionWatchUser", isUserAuthenticated, validator.sessionWatchUser , setLanguage, eventController.sessionWatchUser)
router.post('/event/allDeletedSession', isUserAuthenticated, setLanguage, eventController.allDeletedSession)
router.post('/event/deleteSession', isUserAuthenticated, validator.deleteSession, setLanguage, eventController.deleteSession)
router.post("/event/addFeaSpeakerForSa", isUserAuthenticated, validator.addFeaSpeakerForSa, setLanguage, eventController.addFeaSpeakerForSa)
router.post("/event/editFeaSpeakerForSa", isUserAuthenticated, validator.editFeaSpeakerForSa, setLanguage, eventController.editFeaSpeakerForSa)
router.post('/event/allFeaSpeakerForSa', isUserAuthenticated, setLanguage, eventController.allFeaSpeakerForSa)
router.post("/event/feaSpeakerForSaDetail", isUserAuthenticated, validator.feaSpeakerForSaDetail, setLanguage, eventController.feaSpeakerForSaDetail)
router.post('/event/allDeletedFeaSpeakerForSa', isUserAuthenticated, setLanguage, eventController.allDeletedFeaSpeakerForSa)
router.post('/event/deleteFeaSpeakerForSa', isUserAuthenticated, validator.deleteFeaSpeakerForSa, setLanguage, eventController.deleteFeaSpeakerForSa)
router.post("/event/addFeaSponsorForSa", isUserAuthenticated, validator.addFeaSponsorForSa, setLanguage, eventController.addFeaSponsorForSa)
router.post("/event/editFeaSponsorForSa", isUserAuthenticated, validator.editFeaSponsorForSa, setLanguage, eventController.editFeaSponsorForSa)
router.post('/event/allFeaSponsorForSa', isUserAuthenticated, setLanguage, eventController.allFeaSponsorForSa)
router.post("/event/feaSponsorForSaDetail", isUserAuthenticated, validator.feaSponsorForSaDetail, setLanguage, eventController.feaSponsorForSaDetail)
router.post('/event/allDeletedFeaSponsorForSa', isUserAuthenticated, setLanguage, eventController.allDeletedFeaSponsorForSa)
router.post('/event/deleteFeaSponsorForSa', isUserAuthenticated, validator.deleteFeaSponsorForSa, setLanguage, eventController.deleteFeaSponsorForSa)
router.post('/event/eveBulkUploadOld', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.eveBulkUploadOld)
router.post('/event/speBulkUploadOld', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.speBulkUploadOld)
router.post('/event/sponBulkUploadOld', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.sponBulkUploadOld)
router.post('/event/expoBoothBulkUploadOld', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.expoBoothBulkUploadOld)
router.post('/event/eveBulkUpload', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.eveBulkUpload)
router.post('/event/expoBoothBulkUpload', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.expoBoothBulkUpload)
router.post('/event/speBulkUpload', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.speBulkUpload)
router.post('/event/sponBulkUpload', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, eventController.sponBulkUpload)
router.post('/event/speakerHdBySa', isUserAuthenticated, validator.speakerHdBySa, setLanguage, eventController.speakerHdBySa)
router.post('/event/sponsorHdBySa', isUserAuthenticated, validator.sponsorHdBySa, setLanguage, eventController.sponsorHdBySa)
router.post('/event/expoHdBySa', isUserAuthenticated, validator.expoHdBySa, setLanguage, eventController.expoHdBySa)
router.post('/event/sessionHdBySa', isUserAuthenticated, validator.sessionHdBySa, setLanguage, eventController.sessionHdBySa)
router.post('/event/schedAgHdBySa', isUserAuthenticated, validator.schedAgHdBySa, setLanguage, eventController.schedAgHdBySa)
router.post('/event/stageHdBySa', isUserAuthenticated, validator.stageHdBySa, setLanguage, eventController.stageHdBySa)
router.post('/event/eventHdBySa', isUserAuthenticated, validator.eventHdBySa, setLanguage, eventController.eventHdBySa)
router.post('/event/eveFeedHdBySa', isUserAuthenticated, validator.eveFeedHdBySa, setLanguage, eventController.eveFeedHdBySa)
router.post('/event/eveFeedCmntHdBySa', isUserAuthenticated, validator.eveFeedCmntHdBySa, setLanguage, eventController.eveFeedCmntHdBySa)
router.post('/event/loungeHdBySa', isUserAuthenticated, validator.loungeHdBySa, setLanguage, eventController.loungeHdBySa)
router.post('/event/notificationHdBySa', isUserAuthenticated, validator.notificationHdBySa, setLanguage, eventController.notificationHdBySa)
router.post('/event/organizationHdBySa', isUserAuthenticated, validator.organizationHdBySa, setLanguage, eventController.organizationHdBySa)
router.post('/event/speCollHdBySa', isUserAuthenticated, validator.speCollHdBySa, setLanguage, eventController.speCollHdBySa)
router.post('/event/spoCollHdBySa', isUserAuthenticated, validator.spoCollHdBySa, setLanguage, eventController.spoCollHdBySa)
router.post('/event/zoomHdBySa', isUserAuthenticated, validator.zoomHdBySa, setLanguage, eventController.zoomHdBySa)





module.exports = router;