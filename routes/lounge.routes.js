const router = require('express').Router()
const loungeController = require('../controllers/lounge.controller')
const validator = require('../validators/lounge.validator')
const { setLanguage , isUserAuthenticated } = require('../middleware/auth.middleware')
const  { upload, uploadCsv }  = require('../middleware/upload.middleware')

router.post("/lounge/storeKeysforMeet", isUserAuthenticated, validator.storeKeysforMeet, setLanguage, loungeController.storeKeysforMeet)
router.post('/lounge/allStoredKey', isUserAuthenticated, setLanguage, loungeController.allStoredKey)
router.post("/lounge/addLoungeTable", isUserAuthenticated, upload.array('logo'), validator.addLoungeTable, setLanguage, loungeController.addLoungeTable)
router.post('/lounge/editLoungeTable', isUserAuthenticated, upload.array('logo'), validator.editLoungeTable, setLanguage, loungeController.editLoungeTable)
router.post('/lounge/allLoungeTable', isUserAuthenticated, setLanguage, loungeController.allLoungeTable)
router.post("/lounge/totalLounge", isUserAuthenticated, setLanguage, loungeController.totalLounge)
router.post("/lounge/storeKeysforMeetBySa", isUserAuthenticated, validator.storeKeysforMeetBySa, setLanguage, loungeController.storeKeysforMeetBySa)
router.post("/lounge/editKeysForMeetBySa", isUserAuthenticated, validator.editKeysForMeetBySa, setLanguage, loungeController.editKeysForMeetBySa)
router.post('/lounge/allStoredKeyForMeet', isUserAuthenticated, setLanguage, loungeController.allStoredKeyForMeet)
router.post("/lounge/meetKeyById", isUserAuthenticated, validator.meetKeyById, setLanguage, loungeController.meetKeyById)
router.post('/lounge/keyDeleteBySa', isUserAuthenticated, validator.keyDeleteBySa, setLanguage, loungeController.keyDeleteBySa)
router.post("/lounge/addLoungeTableBySa", isUserAuthenticated, validator.addLoungeTableBySa, setLanguage, loungeController.addLoungeTableBySa)
router.post('/lounge/editLoungeTableBySa', isUserAuthenticated, upload.array('logo'), validator.editLoungeTableBySa, setLanguage, loungeController.editLoungeTableBySa)
router.post('/lounge/editLoungeTableByOrg', isUserAuthenticated, upload.array('logo'), validator.editLoungeTableByOrg, setLanguage, loungeController.editLoungeTableByOrg)
router.post('/lounge/allLoungeTableBySa', isUserAuthenticated, setLanguage, loungeController.allLoungeTableBySa)
router.post('/lounge/secKeyBulkUpload', isUserAuthenticated, uploadCsv.single('csv'), setLanguage, loungeController.secKeyBulkUpload)
router.post('/lounge/loungeByEvent', isUserAuthenticated, validator.loungeByEvent, setLanguage, loungeController.loungeByEvent)
router.post("/lounge/isJoinLounge", isUserAuthenticated, validator.isJoinLounge, setLanguage, loungeController.isJoinLounge)
router.post("/lounge/joinedFromZoom", isUserAuthenticated, setLanguage, loungeController.joinedFromZoom)
router.post("/lounge/isExitFromLounge", isUserAuthenticated, validator.isExitFromLounge, setLanguage, loungeController.isExitFromLounge)
router.post("/lounge/leaveFromZoom", isUserAuthenticated, setLanguage, loungeController.leaveFromZoom)
router.post("/lounge/loungeSeatAvailOnEvent", isUserAuthenticated, validator.loungeSeatAvailOnEvent, setLanguage, loungeController.loungeSeatAvailOnEvent)
router.post("/lounge/loungeByEventSa", isUserAuthenticated, setLanguage, loungeController.loungeByEventSa)
router.post("/lounge/loungeDetailByEventOrg", isUserAuthenticated, validator.loungeDetailByEventOrg, setLanguage, loungeController.loungeDetailByEventOrg)
router.post("/lounge/availLoungeOnOrg", isUserAuthenticated, validator.availLoungeOnOrg, setLanguage, loungeController.availLoungeOnOrg)
router.post('/lounge/deleteLoungeTable', isUserAuthenticated, validator.deleteLoungeTable, setLanguage, loungeController.deleteLoungeTable)
router.post('/lounge/deleteLoungeTableBySa', isUserAuthenticated, validator.deleteLoungeTableBySa, setLanguage, loungeController.deleteLoungeTableBySa)

module.exports = router;
